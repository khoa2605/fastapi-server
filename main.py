from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
import paho.mqtt.client as mqtt
import threading
import json
import time
import os
import asyncio

app = FastAPI()

# Cho ph√©p g·ªçi API t·ª´ web
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Cho ph√©p m·ªçi domain g·ªçi API
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªói khi ESP32 g·ª≠i l√™n v√† l∆∞u l·ªãch s·ª≠
data = {
    "temperature": 0.0,
    "humidity": 0.0,
    "dB_SPL": 0.0,
    "timestamp": time.time(),
}
history_data = []  # Danh s√°ch l∆∞u l·ªãch s·ª≠ ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì

clients = []  # Danh s√°ch WebSocket clients ƒëang k·∫øt n·ªëi

@app.get("/api/data")
def get_data():
    return data

@app.get("/")
def read_root():
    return {"message": "FastAPI server is running!"}
mqtt_status = {
    "connected": False,
    "last_attempt": None
}
@app.get("/api/status")
def get_status():
    return {
        "connected": mqtt_status["connected"],
        "last_attempt": mqtt_status["last_attempt"]
    }

@app.get("/api/history")
def get_history():
    return history_data[-50:]  # Tr·∫£ v·ªÅ ... m·∫´u g·∫ßn nh·∫•t (ho·∫∑c ƒëi·ªÅu ch·ªânh t√πy b·∫°n)

# WebSocket endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    clients.append(websocket)
    print(f"[WebSocket] Client connected. Total clients: {len(clients)}")
    try:
        while True:
            await websocket.receive_text()  # Ch·ªù tin nh·∫Øn gi·ªØ k·∫øt n·ªëi
    except:
        print("[WebSocket] Client disconnected.")
    finally:
        clients.remove(websocket)

# MQTT callback
def on_connect(client, userdata, flags, rc):
    mqtt_status["connected"] = True
    mqtt_status["last_attempt"] = time.time()
    
    if rc == 0:
        print("[MQTT] Successfully connecting to broker.")
        client.subscribe("ESP32/data")
    else:
        print(f"[MQTT] Connect fail, Error: {rc}")

def on_disconnect(client, userdata, rc):
    print("[MQTT] Lost connected. Reconnecting...")
    mqtt_status["connected"] = False
    mqtt_status["last_attempt"] = time.time()


# H√†m callback khi nh·∫≠n MQTT
def on_message(client, userdata, msg):
    payload = msg.payload.decode()
    print(f"[MQTT] Received topic: {msg.topic} at {time.strftime('%H:%M:%S')} ‚Äì payload: {payload}")
    try:
        new_data = json.loads(payload)
        data["temperature"] = new_data.get("temperature", data["temperature"])
        data["humidity"] = new_data.get("humidity", data["humidity"])
        data["dB_SPL"] = new_data.get("dB_SPL", data.get("dB_SPL", 0.0))
        data["timestamp"] = time.time()

        # L∆∞u l·ªãch s·ª≠
        history_data.append({
            "temperature": data["temperature"],
            "humidity": data["humidity"],
            "dB_SPL": data["dB_SPL"],
            "timestamp": data["timestamp"],
        })

        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng l·ªãch s·ª≠ n·∫øu c·∫ßn
        if len(history_data) > 200:
            history_data.pop(0)

        # G·ª≠i d·ªØ li·ªáu ƒë·∫øn t·∫•t c·∫£ WebSocket client ƒëang k·∫øt n·ªëi
        for ws in clients:
            try:
                asyncio.create_task(ws.send_json(data))
            except:
                pass  # Tr√°nh crash n·∫øu client ƒë√£ ng·∫Øt k·∫øt n·ªëi

    except json.JSONDecodeError:
        print("JSON decode Error:", payload)
    except Exception as e:
        print("MQTT processing Error:", e)

def mqtt_thread():
    while True:
        try:
            client = mqtt.Client()
            client.username_pw_set("khoa2605", "Khoa2605")
            client.on_connect = on_connect
            client.on_disconnect = on_disconnect
            client.on_message = on_message

            client.tls_set()
            client.connect("5ea4ea4499054653a5069edcfb38de4c.s1.eu.hivemq.cloud", 8883, 60)
            client.loop_forever()
        except Exception as e:
            print("Error MQTT loop, retrying in 5s:", e)
            time.sleep(5)


# Ch·∫°y MQTT ·ªü lu·ªìng ri√™ng song song
threading.Thread(target=mqtt_thread, daemon=True).start()

#Pick Port t·ª´ Render
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 10000))
    print(f"üåê App running on port: {port}")
    uvicorn.run("main:app", host="0.0.0.0", port=port)
